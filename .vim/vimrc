" ----------------------- Options
let mapleader = " "

set clipboard=unnamedplus
set number
set relativenumber
set nowrap
set ttyfast

set nobackup
set noswapfile
set nowritebackup

set hlsearch
set incsearch

set autoindent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

set smartindent
set smarttab
set scrolloff=10

" ----------------------- Plugins
call plug#begin()
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
call plug#end()

" ----------------------- Keymaps
noremap <leader>pv :Ex<CR>
nnoremap <Esc> :noh<CR>
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
nnoremap <C-a> gg<S-v>G

nnoremap <C-left> <C-w><
nnoremap <C-right> <C-w>>
nnoremap <C-up> <C-w>+
nnoremap <C-down> <C-w>-

nnoremap <C-p> :Files<CR>
nnoremap <leader>gf :GFiles<CR>
nnoremap <leader>fg :RG<CR>

if executable('vim-language-server')
  augroup LspVim
    autocmd!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'vim-language-server',
        \ 'cmd': {server_info->['vim-language-server', '--stdio']},
        \ 'whitelist': ['vim'],
        \ 'initialization_options': {
        \   'vimruntime': $VIMRUNTIME,
        \   'runtimepath': &rtp,
        \ }})
  augroup END
endif

if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript', 'typescript.tsx', 'typescriptreact'],
        \ })
endif

if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-remote=auto']},
        \ 'allowlist': ['go', 'gomod', 'gohtmltmpl', 'gotexttmpl'],
        \ })
    autocmd BufWritePre *.go
        \ call execute('LspDocumentFormatSync') |
        \ call execute('LspCodeActionSync source.organizeImports')
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes

    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <leader>ca :LspCodeAction<CR>
    nnoremap <leader>e :LspDocumentDiagnostics<CR>
    nnoremap <leader>f :LspDocumentFormat<CR>
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-h> lsp#scroll(-4)

    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction

let g:lsp_format_sync_timeout = 1000
let g:lsp_semantic_enabled = 1
let g:lsp_code_actions_use_popup_menu = 1
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_diagnostics_signs_enabled = 1
let g:lsp_diagnostics_signs_error = {'text': 'üö´'}
let g:lsp_diagnostics_signs_warning = {'text': '‚ö†Ô∏è'}
let g:lsp_diagnostics_signs_hint = {'text': 'üîç'}
let g:lsp_diagnostics_signs_information = {'text': '‚ÑπÔ∏è'}
let g:lsp_document_code_action_signs_enabled = 1
let g:lsp_document_code_action_signs_hint = {'text': 'üîπ'}

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" IDK why this needs to go last
" set termguicolors
syntax on
set t_Co=16
let g:solarized_termcolors=16
set background=dark
colorscheme gruvbox
